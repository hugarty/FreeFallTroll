import java.util.Scanner;

/**
 *
 * @author RA21450285
 */
public class HammingGIT {
    public static void main(String[] args) {
        
        String mensagemComRedundancia;
        String retorno ="";
        Scanner l = new Scanner(System.in);
        System.out.print("Emissor\nDigite sua mensagem\n");
        String entrada = l.nextLine();
        int r = descobrirQuantidadeR(entrada.length());

        mensagemComRedundancia = emissor(entrada, r);
        
        System.out.println("\nMensagem com redundancia: " + mensagemComRedundancia + "\n----------------------------------\n");
        System.out.println("Quer gerar um erro? Digite 'y' para sim e qualquer outra letra para não.");
        
        if ("y".equals(l.nextLine())) {
            System.out.println("Digite o posicao que quer alterar de 1 a " + (mensagemComRedundancia.length()) + ".");
            int posicao = l.nextInt();
            mensagemComRedundancia = geraErro(mensagemComRedundancia, posicao - 1);
        }
        
        receptor(mensagemComRedundancia, r);
    }

    public static void receptor(String msgComR, int r) {
        String retorno;
        
        System.out.println("\nReceptor");
        msgComR = giraString(msgComR);
        retorno = valorDeCadaR(r, msgComR);
        if(contaUns(retorno, 'a'))
        {
            System.out.println("Teve erro.\nRetorno: "+retorno+"\nCorrigindo erro...\n");
            //receptor(geraErro(msgComR, binarioToDeci(retorno)), r);  // O ERRO TA AQUI SE VIRA
        }else
            System.out.println("Não teve erro.\nRetorno: "+retorno+"\nEnvia mensagem.");
    }

    public static String emissor(String hamming, int r) {
        String rs;

        hamming = adicionaRs(r, hamming);
        rs = valorDeCadaR(r, hamming);
        return alteraValoresR(rs, hamming);
    }

    public static int descobrirQuantidadeR(int tamanho) {
        int r = 0;
        do {
            r++;
        } while (Math.pow(2, r) < tamanho + r + 1);
        return r;
    }

    /* 
        Gira a mensagem para adicionar os Rs na parte de inicial da mensagem
        Cria o Array char addR com tamanho de msg + quantidad de Rs
        Primeiro 'for' Joga a mensagem dentro do Array
        Segundo 'for' adiciona os Rs nas posições deles dentro do Array
        Terceiro 'for' joga os valores do Array dentro da String
     */
    private static String adicionaRs(int r, String hamming) {
        hamming = giraString(hamming);
        char[] addR = new char[hamming.length() + r];
        int cont = 0;
        for (int i = 0; i < hamming.length(); i++) {
            addR[i] = hamming.charAt(i);
        }
        for (int i = 0; i < r; i++) {
            for (int o = 0; o < addR.length; o++) {
                if (o == Math.pow(2, cont) - 1) {
                    //add valor a posição
                    addR = jogaParaFrenteValores(addR, o);
                    addR[o] = 'r';
                    if (cont < r) {
                        cont++;
                    }
                }
            }
        }
        hamming = "";
        for (int i = 0; i < addR.length; i++) {
            hamming += addR[i];
        }
        return hamming;
    }

    /*
        Cria um Array int 'R' com tamanho da quantidade de r's
        Cria Contador que vai ser usado para pular os negocios
        Cria uma subString auxiliar
        While que vai executar na quantidade de Rs presentes no sistema do maior para o menor
        Inicializa o contador antes do for com a quantidade de casas que ele pula
        For irá passar por todos os elementos da String
        Primeiro if pra definir o primeiro valor da subString;
        Segundo if Verifica se o intervalo de não pega dos itens foi completo
        Terceiro if é para atribuir o valor a substring;
        Depois do for você tem que atribuir o valor do determinado R;
        
        
        TA FUNCIONANDO 
        SÓ CONTAR OS 1 GG
     */
    public static String valorDeCadaR(int r, String hamming) {
        String Erres = "";
        int contador;
        String subString = "";
        while (r > 0) 
        {
            r--;
            contador = (int) Math.pow(2, r);
            for (int i = 0; i < hamming.length(); i++) {
                if (i >= Math.pow(2, r) - 1) {
                    if (contador < (Math.pow(2, r) - 1) * -1) {
                        contador = (int) Math.pow(2, r);
                    }
                    if (contador > 0) {
                        subString += hamming.charAt(i);
                    }
                    contador--;
                }
            }

            Erres += contaUns(subString);
//            System.out.println("R" + r + "  " + subString+" = \t"+ contaUns(subString));
            subString = "";
        }
        return Erres;
    }

    public static int contaUns(String stringAuxiliar) {
        int contador = 0;
        for (int i = 0; i < stringAuxiliar.length(); i++) {
            if ('1' == stringAuxiliar.charAt(i)) {
                contador++;
            }
        }
        if (contador % 2 == 0) {
            return 0;
        } else {
            return 1;
        }
    }
    public static boolean contaUns(String stringAuxiliar, char receptor) {
        int contador = 0;
        for (int i = 0; i < stringAuxiliar.length(); i++) {
            if ('1' == stringAuxiliar.charAt(i)) {
                contador++;
            }
        }
        return contador > 0;
    }

    private static String giraString(String hamming) {
        int cont = 0;
        String auxiliar = "";
        while (cont < hamming.length()) {
            auxiliar += hamming.charAt(cont);
            cont++;
        }
        hamming = "";
        cont += -1;
        while (cont >= 0) {
            hamming += auxiliar.charAt(cont);
            cont--;
        }
        return hamming;
    }

    private static char[] jogaParaFrenteValores(char[] addR, int o) {
        for (int i = addR.length; i >= o; i--) {
            if (i + 1 < addR.length) {
                addR[i + 1] = addR[i];
            }
        }
        return addR;
    }

    private static String alteraValoresR(String rs, String hamming) {
        char[] auxiliar = hamming.toCharArray();
        int cont = 0;
        for (int i = 0; i < auxiliar.length; i++) {
            if (auxiliar[i] == 'r') {
                auxiliar[i] = rs.charAt(cont);
                cont++;
            }
        }

        hamming = "";

        for (int i = 0; i < auxiliar.length; i++) {
            hamming += "" + auxiliar[i];
        }
        hamming = giraString(hamming);
        return hamming;
    }

    private static String geraErro(String msg, int posicao) {
        if (posicao >= 0 && posicao < msg.length()) {
            System.out.println("\nMensagem SEM erro:"+msg);
            msg = giraString(msg);
            char[] charray = msg.toCharArray();
            if (charray[posicao] == '0')
                charray[posicao] = '1';
            else 
                charray[posicao] = '0';
            
            msg = "";
            for (int i = 0; i < charray.length; i++) {
                msg += charray[i];
            }
            System.out.println("Mensagem COM erro:"+giraString(msg)+"\n----------------------------------");
            msg = giraString(msg);
            return msg;
        } else 
            System.out.println("Esse valor não pode ser alterado");
        return msg;
    }
    
    private static int binarioToDeci(String bina)
    {
        int valor = 0;int c = 0;
        for(int i = bina.length() - 1; i >= 0; i--)
        {
            if(bina.charAt(i) == '1')
            valor += Math.pow(2, c);
            c++;
        }
        
        return valor;
    }
    
}



// 

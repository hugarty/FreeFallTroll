import java.util.Scanner;

public class HammingGIT {
    public static void main(String[] args) {
        
        String mensagemComRedundancia;
        Scanner l = new Scanner(System.in);
        System.out.print("Emissor -\nDigite sua mensagem\n");
        String entrada = l.nextLine();
        int r = descobrirQuantidadeR(entrada.length());

        mensagemComRedundancia = emissor(entrada, r);
        
        System.out.println("\nMensagem com redundancia: " + mensagemComRedundancia + "\n----------------------------------\n");
        System.out.println("Quer gerar um erro? Digite 'y' para sim e qualquer outra letra para não.");
        
        if ("y".equals(l.nextLine())) {
            System.out.println("Digite o posição que quer alterar de 1 a " + (mensagemComRedundancia.length()) + ".");
            int posicao = l.nextInt();
            System.out.println("----------------------------------\n");
            mensagemComRedundancia = geraErro(mensagemComRedundancia, posicao - 1);
        }
        
        receptor(mensagemComRedundancia, r);
    }

    /*
        Programa receptor recebe a mensagem já com redundancias e a quantidade de redundancias
        Verifica se tem erros gerando um retorno, caso o retorno tenha algum numero 1
    o programa altomaticamente executa a correção de erros (linha 46).
        Caso não tenha erros ele retira os valores redundantes e "envia" para camada de rede a mensagem.
    */
    public static void receptor(String msgComR, int r) {
        String retorno;
        
        System.out.println("\nReceptor -");
        msgComR = giraString(msgComR);
        retorno = valorDeCadaR(r, msgComR);
        System.out.println("Retorno: "+retorno);
        
        if(contaUns(retorno, 'a'))
        {
            System.out.println("Houve erro.\nCorrigindo erro...\n----------------------------------");
            receptor(geraErro(giraString(msgComR), binarioToDeci(retorno) -1), r); 
        }else{
            System.out.println("Enviando mensagem sem redundancias: "+ removeRs(r, msgComR));
        }
    }
    
    /*
        Emissor recebe a mensagem
        Adiciona a quantidade de rendundacia à mensagem
        Depois adiciona o valor de cada redundancia
        E retorna a mensagem com os valores de redundancia
    */
    public static String emissor(String hamming, int r) {
        String rs;
        hamming = adicionaRs(r, hamming);
        rs = valorDeCadaR(r, hamming);
        return alteraValoresR(rs, hamming);
    }

    /*
        Metodo para descobrir a quantidade de redundancias que aquela 
    mensagem irá ter.
    */
    public static int descobrirQuantidadeR(int tamanho) {
        int r = 0;
        do {
            r++;
        } while (Math.pow(2, r) < tamanho + r + 1);
        return r;
    }

    /* 
        Metodo usado para adicionar as redundancias nas posições corretas
    da mensagem.
        Esse metodo não atribui valores às redundancias. Só as posiciona.
     */
    private static String adicionaRs(int r, String hamming) {
        hamming = giraString(hamming);
        char[] addR = new char[hamming.length() + r];
        int cont = 0;
        for (int i = 0; i < hamming.length(); i++) {
            addR[i] = hamming.charAt(i);
        }
        for (int i = 0; i < r; i++) {
            for (int o = 0; o < addR.length; o++) {
                if (o == Math.pow(2, cont) - 1) {
                    //add valor a posição
                    addR = jogaParaFrenteValores(addR, o);
                    addR[o] = 'r';
                    if (cont < r) {
                        cont++;
                    }
                }
            }
        }
        hamming = "";
        for (int i = 0; i < addR.length; i++) {
            hamming += addR[i];
        }
        return hamming;
    }
    
    /*
        Metodo usado para remover as redundancias antes de enviar a mensagem.
    */
    private static String removeRs(int r, String hamming)
    {
        char [] charray = hamming.toCharArray();
        int cont = 0;
        
        for(int i = 0; i < hamming.length(); i++){
            if(i == Math.pow(2, cont)-1){
                charray[i] = 'x';
                if(cont < r - 1)
                    cont ++;
            }
        }
        hamming = "";
        for(int i = 0; i < charray.length; i++)
        {
            if(charray[i] != 'x')                
                hamming += charray[i];
        }        
        return giraString(hamming);
    }
    /*
        Metodo usado para retornar o valor correto a cada redundancia já
    presente na mensagem.
        Ele usa o metodo contaUns para retornar os valores de cada R.
        Ele não atribui valores, só retorna os valores de cada redundancia.
     */
    public static String valorDeCadaR(int r, String hamming) {
        String Erres = "";
        int contador;
        String subString = "";
        while (r > 0) 
        {
            r--;
            contador = (int) Math.pow(2, r);
            for (int i = 0; i < hamming.length(); i++) {
                if (i >= Math.pow(2, r) - 1) {
                    if (contador < (Math.pow(2, r) - 1) * -1) {
                        contador = (int) Math.pow(2, r);
                    }
                    if (contador > 0) {
                        subString += hamming.charAt(i);
                    }
                    contador--;
                }
            }

            Erres += contaUns(subString);
            subString = "";
        }
        return Erres;
    }

    /*
        Esse primeiro contaUns é utilizado para verificar se a string
    recebida tem um valor de numeros 1 impar ou par e retorna o valor para
    modificar ou deixar ela par.
    */
    public static int contaUns(String stringAuxiliar) {
        int contador = 0;
        for (int i = 0; i < stringAuxiliar.length(); i++) {
            if ('1' == stringAuxiliar.charAt(i)) {
                contador++;
            }
        }
        if (contador % 2 == 0) {
            return 0;
        } else {
            return 1;
        }
    }
    
    /*
        Segundo conta uns é usado para verificar se tem erros na mensagem
    recebida pelo receptor. Caso tenha retorna true.
    */
    public static boolean contaUns(String stringAuxiliar, char receptor) {
        int contador = 0;
        for (int i = 0; i < stringAuxiliar.length(); i++) {
            if ('1' == stringAuxiliar.charAt(i)) {
                contador++;
            }
        }
        return contador > 0;
    }

    /*
        Gira a String, metodo auxiliar para facilitar a execução o código.
    */
    private static String giraString(String hamming) {
        int cont = 0;
        String auxiliar = "";
        while (cont < hamming.length()) {
            auxiliar += hamming.charAt(cont);
            cont++;
        }
        hamming = "";
        cont += -1;
        while (cont >= 0) {
            hamming += auxiliar.charAt(cont);
            cont--;
        }
        return hamming;
    }
    
    /*
        Metodo auxliar para facilitar a execução do código.
    */
    private static char[] jogaParaFrenteValores(char[] addR, int o) {
        for (int i = addR.length; i >= o; i--) {
            if (i + 1 < addR.length) {
                addR[i + 1] = addR[i];
            }
        }
        return addR;
    }

    /*
        Metodo que altera o valores das redundancias conforme os valors
    recebido no array "rs".
    */
    private static String alteraValoresR(String rs, String hamming) {
        char[] auxiliar = hamming.toCharArray();
        int cont = 0;
        for (int i = 0; i < auxiliar.length; i++) {
            if (auxiliar[i] == 'r') {
                auxiliar[i] = rs.charAt(cont);
                cont++;
            }
        }
        hamming = "";
        for (int i = 0; i < auxiliar.length; i++) {
            hamming += "" + auxiliar[i];
        }
        hamming = giraString(hamming);
        return hamming;
    }

    /*
        Metodo usado para alterar um bit da mensagem, caso o usuário do
    programa queria alterar o valor de algum bit. Assim gerando um erro.
    */
    private static String geraErro(String msg, int posicao) {
        if (posicao >= 0 && posicao < msg.length()) {
            msg = giraString(msg);
            char[] charray = msg.toCharArray();
            if (charray[posicao] == '0')
                charray[posicao] = '1';
            else 
                charray[posicao] = '0';
            
            msg = "";
            for (int i = 0; i < charray.length; i++) {
                msg += charray[i];
            }
            System.out.println("Alterando mensagem.\nMensagem atualizada:"+giraString(msg)+".\n----------------------------------");
            msg = giraString(msg);
            return msg;
        } else 
            System.out.println("Esse valor não pode ser alterado");
        return msg;
    }
    
    /*
        Metodo que transforma valores binarios para decimal.
    */
    private static int binarioToDeci(String bina)
    {
        int valor = 0;int c = 0;
        for(int i = bina.length() - 1; i >= 0; i--)
        {
            if(bina.charAt(i) == '1')
            valor += Math.pow(2, c);
            c++;
        }
        
        return valor;
    }
    
}
